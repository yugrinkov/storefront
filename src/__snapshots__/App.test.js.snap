// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mini cart component check cart popup with product(s) 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    cartEntries={
        Array [
            Object {
              "brand": "brand",
              "id": 1,
              "price": 50,
              "productQty": 2,
              "title": "title",
            },
          ]
    }
    totalPrice={50}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <a
          className="mini-cart-link"
          onClick={[Function]}
>
          My Cart (
          1
          )
</a>,
        <div
          className="cart-popup"
>
          <div
                    className="mini-cart-entries"
          >
                    <MiniCartEntry
                              cartEntry={
                                        Object {
                                                  "brand": "brand",
                                                  "id": 1,
                                                  "price": 50,
                                                  "productQty": 2,
                                                  "title": "title",
                                                }
                              }
                              onClickRemoveLink={undefined}
                    />
          </div>
          <div
                    className="total"
          >
                    <div
                              className="total-label"
                    >
                              TOTAL
                    </div>
                    <div
                              className="total-value"
                    >
                              <Price
                                        priceValue={50}
                              />
                    </div>
          </div>
          <div
                    className="mini-cart-buttons"
          >
                    <button
                              className="button inverse"
                              onClick={[Function]}
                    >
                              VIEW CART
                    </button>
                    <button
                              className="button"
                    >
                              CHECKOUT
                    </button>
          </div>
</div>,
      ],
      "className": "mini-cart",
    },
    "ref": Object {
      "current": null,
    },
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "My Cart (",
            1,
            ")",
          ],
          "className": "mini-cart-link",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          "My Cart (",
          1,
          ")",
        ],
        "type": "a",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            false,
            <div
              className="mini-cart-entries"
>
              <MiniCartEntry
                            cartEntry={
                                          Object {
                                                        "brand": "brand",
                                                        "id": 1,
                                                        "price": 50,
                                                        "productQty": 2,
                                                        "title": "title",
                                                      }
                            }
                            onClickRemoveLink={undefined}
              />
</div>,
            <div
              className="total"
>
              <div
                            className="total-label"
              >
                            TOTAL
              </div>
              <div
                            className="total-value"
              >
                            <Price
                                          priceValue={50}
                            />
              </div>
</div>,
            <div
              className="mini-cart-buttons"
>
              <button
                            className="button inverse"
                            onClick={[Function]}
              >
                            VIEW CART
              </button>
              <button
                            className="button"
              >
                            CHECKOUT
              </button>
</div>,
          ],
          "className": "cart-popup",
        },
        "ref": null,
        "rendered": Array [
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <MiniCartEntry
                  cartEntry={
                                    Object {
                                                      "brand": "brand",
                                                      "id": 1,
                                                      "price": 50,
                                                      "productQty": 2,
                                                      "title": "title",
                                                    }
                  }
                  onClickRemoveLink={undefined}
/>,
              ],
              "className": "mini-cart-entries",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "1",
                "nodeType": "function",
                "props": Object {
                  "cartEntry": Object {
                    "brand": "brand",
                    "id": 1,
                    "price": 50,
                    "productQty": 2,
                    "title": "title",
                  },
                  "onClickRemoveLink": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="total-label"
>
                  TOTAL
</div>,
                <div
                  className="total-value"
>
                  <Price
                                    priceValue={50}
                  />
</div>,
              ],
              "className": "total",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "TOTAL",
                  "className": "total-label",
                },
                "ref": null,
                "rendered": "TOTAL",
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Price
                    priceValue={50}
/>,
                  "className": "total-value",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "priceValue": 50,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <button
                  className="button inverse"
                  onClick={[Function]}
>
                  VIEW CART
</button>,
                <button
                  className="button"
>
                  CHECKOUT
</button>,
              ],
              "className": "mini-cart-buttons",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "VIEW CART",
                  "className": "button inverse",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "VIEW CART",
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "CHECKOUT",
                  "className": "button",
                },
                "ref": null,
                "rendered": "CHECKOUT",
                "type": "button",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <a
            className="mini-cart-link"
            onClick={[Function]}
>
            My Cart (
            1
            )
</a>,
          <div
            className="cart-popup"
>
            <div
                        className="mini-cart-entries"
            >
                        <MiniCartEntry
                                    cartEntry={
                                                Object {
                                                            "brand": "brand",
                                                            "id": 1,
                                                            "price": 50,
                                                            "productQty": 2,
                                                            "title": "title",
                                                          }
                                    }
                                    onClickRemoveLink={undefined}
                        />
            </div>
            <div
                        className="total"
            >
                        <div
                                    className="total-label"
                        >
                                    TOTAL
                        </div>
                        <div
                                    className="total-value"
                        >
                                    <Price
                                                priceValue={50}
                                    />
                        </div>
            </div>
            <div
                        className="mini-cart-buttons"
            >
                        <button
                                    className="button inverse"
                                    onClick={[Function]}
                        >
                                    VIEW CART
                        </button>
                        <button
                                    className="button"
                        >
                                    CHECKOUT
                        </button>
            </div>
</div>,
        ],
        "className": "mini-cart",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "My Cart (",
              1,
              ")",
            ],
            "className": "mini-cart-link",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            "My Cart (",
            1,
            ")",
          ],
          "type": "a",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              false,
              <div
                className="mini-cart-entries"
>
                <MiniCartEntry
                                cartEntry={
                                                Object {
                                                                "brand": "brand",
                                                                "id": 1,
                                                                "price": 50,
                                                                "productQty": 2,
                                                                "title": "title",
                                                              }
                                }
                                onClickRemoveLink={undefined}
                />
</div>,
              <div
                className="total"
>
                <div
                                className="total-label"
                >
                                TOTAL
                </div>
                <div
                                className="total-value"
                >
                                <Price
                                                priceValue={50}
                                />
                </div>
</div>,
              <div
                className="mini-cart-buttons"
>
                <button
                                className="button inverse"
                                onClick={[Function]}
                >
                                VIEW CART
                </button>
                <button
                                className="button"
                >
                                CHECKOUT
                </button>
</div>,
            ],
            "className": "cart-popup",
          },
          "ref": null,
          "rendered": Array [
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <MiniCartEntry
                    cartEntry={
                                        Object {
                                                            "brand": "brand",
                                                            "id": 1,
                                                            "price": 50,
                                                            "productQty": 2,
                                                            "title": "title",
                                                          }
                    }
                    onClickRemoveLink={undefined}
/>,
                ],
                "className": "mini-cart-entries",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "function",
                  "props": Object {
                    "cartEntry": Object {
                      "brand": "brand",
                      "id": 1,
                      "price": 50,
                      "productQty": 2,
                      "title": "title",
                    },
                    "onClickRemoveLink": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="total-label"
>
                    TOTAL
</div>,
                  <div
                    className="total-value"
>
                    <Price
                                        priceValue={50}
                    />
</div>,
                ],
                "className": "total",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "TOTAL",
                    "className": "total-label",
                  },
                  "ref": null,
                  "rendered": "TOTAL",
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Price
                      priceValue={50}
/>,
                    "className": "total-value",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "priceValue": 50,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <button
                    className="button inverse"
                    onClick={[Function]}
>
                    VIEW CART
</button>,
                  <button
                    className="button"
>
                    CHECKOUT
</button>,
                ],
                "className": "mini-cart-buttons",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "VIEW CART",
                    "className": "button inverse",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "VIEW CART",
                  "type": "button",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "CHECKOUT",
                    "className": "button",
                  },
                  "ref": null,
                  "rendered": "CHECKOUT",
                  "type": "button",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`mini cart component check cart popup with product(s) 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    cartEntries={
        Array [
            Object {
              "brand": "brand",
              "id": 1,
              "price": 50,
              "productQty": 2,
              "title": "title",
            },
          ]
    }
    totalPrice={50}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <a
          className="mini-cart-link"
          onClick={[Function]}
>
          My Cart (
          1
          )
</a>,
        false,
      ],
      "className": "mini-cart",
    },
    "ref": Object {
      "current": null,
    },
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "My Cart (",
            1,
            ")",
          ],
          "className": "mini-cart-link",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          "My Cart (",
          1,
          ")",
        ],
        "type": "a",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <a
            className="mini-cart-link"
            onClick={[Function]}
>
            My Cart (
            1
            )
</a>,
          false,
        ],
        "className": "mini-cart",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "My Cart (",
              1,
              ")",
            ],
            "className": "mini-cart-link",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            "My Cart (",
            1,
            ")",
          ],
          "type": "a",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`mini cart component check empty cart 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    cartEntries={Array []}
    totalPrice={500}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <a
          className="mini-cart-link"
          onClick={[Function]}
>
          My Cart (
          0
          )
</a>,
        <div
          className="cart-popup"
>
          <p>
                    Your cart is empty
          </p>
</div>,
      ],
      "className": "mini-cart",
    },
    "ref": Object {
      "current": null,
    },
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "My Cart (",
            0,
            ")",
          ],
          "className": "mini-cart-link",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          "My Cart (",
          0,
          ")",
        ],
        "type": "a",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p>
              Your cart is empty
</p>,
            false,
            false,
            false,
          ],
          "className": "cart-popup",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Your cart is empty",
            },
            "ref": null,
            "rendered": "Your cart is empty",
            "type": "p",
          },
          false,
          false,
          false,
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <a
            className="mini-cart-link"
            onClick={[Function]}
>
            My Cart (
            0
            )
</a>,
          <div
            className="cart-popup"
>
            <p>
                        Your cart is empty
            </p>
</div>,
        ],
        "className": "mini-cart",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "My Cart (",
              0,
              ")",
            ],
            "className": "mini-cart-link",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            "My Cart (",
            0,
            ")",
          ],
          "type": "a",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p>
                Your cart is empty
</p>,
              false,
              false,
              false,
            ],
            "className": "cart-popup",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Your cart is empty",
              },
              "ref": null,
              "rendered": "Your cart is empty",
              "type": "p",
            },
            false,
            false,
            false,
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`mini cart component check empty cart 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    cartEntries={Array []}
    totalPrice={500}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <a
          className="mini-cart-link"
          onClick={[Function]}
>
          My Cart (
          0
          )
</a>,
        false,
      ],
      "className": "mini-cart",
    },
    "ref": Object {
      "current": null,
    },
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "My Cart (",
            0,
            ")",
          ],
          "className": "mini-cart-link",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          "My Cart (",
          0,
          ")",
        ],
        "type": "a",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <a
            className="mini-cart-link"
            onClick={[Function]}
>
            My Cart (
            0
            )
</a>,
          false,
        ],
        "className": "mini-cart",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "My Cart (",
              0,
              ")",
            ],
            "className": "mini-cart-link",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Array [
            "My Cart (",
            0,
            ")",
          ],
          "type": "a",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`mini cart component check mini cart entry 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MiniCartEntry
    cartEntry={
        Object {
            "brand": "brand",
            "id": 1,
            "image": "img.png",
            "price": 50,
            "productQty": 2,
            "title": "title",
          }
    }
    onClickRemoveLink={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <FontAwesomeIcon
          border={false}
          className="remove-button"
          fixedWidth={false}
          flip={null}
          icon={
                    Object {
                              "icon": Array [
                                352,
                                512,
                                Array [],
                                "f00d",
                                "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z",
                              ],
                              "iconName": "times",
                              "prefix": "fas",
                            }
          }
          inverse={false}
          listItem={false}
          mask={null}
          onClick={[Function]}
          pull={null}
          pulse={false}
          rotation={null}
          size={null}
          spin={false}
          symbol={false}
          title=""
          transform={null}
/>,
        <div
          className="mini-cart-entry-image"
>
          <ProductImage
                    alt="title"
                    image="img.png"
          />
</div>,
        <div
          className="mini-cart-entry-info"
>
          <h3
                    className="product-name"
          >
                    title x2
          </h3>
          <p
                    className="product-brand"
          >
                    brand
          </p>
          <Price
                    priceValue={50}
          />
</div>,
      ],
      "className": "mini-cart-entry",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "border": false,
          "className": "remove-button",
          "fixedWidth": false,
          "flip": null,
          "icon": Object {
            "icon": Array [
              352,
              512,
              Array [],
              "f00d",
              "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z",
            ],
            "iconName": "times",
            "prefix": "fas",
          },
          "inverse": false,
          "listItem": false,
          "mask": null,
          "onClick": [Function],
          "pull": null,
          "pulse": false,
          "rotation": null,
          "size": null,
          "spin": false,
          "symbol": false,
          "title": "",
          "transform": null,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <ProductImage
            alt="title"
            image="img.png"
/>,
          "className": "mini-cart-entry-image",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "alt": "title",
            "image": "img.png",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h3
              className="product-name"
>
              title x2
</h3>,
            <p
              className="product-brand"
>
              brand
</p>,
            <Price
              priceValue={50}
/>,
          ],
          "className": "mini-cart-entry-info",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "title x2",
              "className": "product-name",
            },
            "ref": null,
            "rendered": "title x2",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "brand",
              "className": "product-brand",
            },
            "ref": null,
            "rendered": "brand",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "priceValue": 50,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <FontAwesomeIcon
            border={false}
            className="remove-button"
            fixedWidth={false}
            flip={null}
            icon={
                        Object {
                                    "icon": Array [
                                      352,
                                      512,
                                      Array [],
                                      "f00d",
                                      "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z",
                                    ],
                                    "iconName": "times",
                                    "prefix": "fas",
                                  }
            }
            inverse={false}
            listItem={false}
            mask={null}
            onClick={[Function]}
            pull={null}
            pulse={false}
            rotation={null}
            size={null}
            spin={false}
            symbol={false}
            title=""
            transform={null}
/>,
          <div
            className="mini-cart-entry-image"
>
            <ProductImage
                        alt="title"
                        image="img.png"
            />
</div>,
          <div
            className="mini-cart-entry-info"
>
            <h3
                        className="product-name"
            >
                        title x2
            </h3>
            <p
                        className="product-brand"
            >
                        brand
            </p>
            <Price
                        priceValue={50}
            />
</div>,
        ],
        "className": "mini-cart-entry",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "border": false,
            "className": "remove-button",
            "fixedWidth": false,
            "flip": null,
            "icon": Object {
              "icon": Array [
                352,
                512,
                Array [],
                "f00d",
                "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z",
              ],
              "iconName": "times",
              "prefix": "fas",
            },
            "inverse": false,
            "listItem": false,
            "mask": null,
            "onClick": [Function],
            "pull": null,
            "pulse": false,
            "rotation": null,
            "size": null,
            "spin": false,
            "symbol": false,
            "title": "",
            "transform": null,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <ProductImage
              alt="title"
              image="img.png"
/>,
            "className": "mini-cart-entry-image",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "alt": "title",
              "image": "img.png",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h3
                className="product-name"
>
                title x2
</h3>,
              <p
                className="product-brand"
>
                brand
</p>,
              <Price
                priceValue={50}
/>,
            ],
            "className": "mini-cart-entry-info",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "title x2",
                "className": "product-name",
              },
              "ref": null,
              "rendered": "title x2",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "brand",
                "className": "product-brand",
              },
              "ref": null,
              "rendered": "brand",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "priceValue": 50,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
